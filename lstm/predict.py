import sys
from pathlib import Path
ABS_PATH = Path(__file__).parent.absolute()
sys.path.append(str(ABS_PATH))
# import torch
from model import Ensemble
from dataset import get_loader


def load_model(model_weights):
    model = Ensemble(model_weights)
    return model


def predict(df, month, num_workers=2):
    encoder_path = ABS_PATH.joinpath('ohe_encoder.pkl')
    
    reg_dict = {'Литва': 'европа',
     'Китай': 'азия',
     'Казахстан': 'снг',
     'Россия': 'снг',
     'Италия': 'европа',
     'Белоруссия': 'снг',
     'Германия': 'европа',
     'Франция': 'европа',
     'Соед. Королев.': 'европа',
     'Узбекистан': 'снг',
     'Польша': 'европа',
     'Нидерланды': 'европа',
     'Украина': 'снг',
     'Финляндия': 'европа',
     'Сербия': 'европа',
     'Турция': 'средняя азия',
     'Молдавия': 'европа',
     'Венгрия': 'европа',
     'Бельгия': 'европа',
     'Швейцария': 'европа',
     'Швеция': 'европа',
     'Эстония': 'европа',
     'Чехия': 'европа',
     'Австрия': 'европа',
     'Киргизия': 'снг',
     'Дания': 'европа',
     'Таджикистан': 'снг',
     'Испания': 'европа',
     'Словакия': 'европа',
     'Индия': 'азия',
     'Атырауская обл.': 'снг',
     'Рязанская обл.': 'цфо',
     'Алтайский край': 'сфо',
     'Пермский край': 'пфо',
     'Нижегородская обл.': 'пфо',
     'Свердловская обл.': 'уфо',
     'Брестская обл.': 'снг',
     'Ростовская обл.': 'юфо',
     'Московская обл.': 'цфо',
     'Респ. Башкортостан': 'пфо',
     'Минская обл.': 'снг',
     'Волгоградская обл.': 'юфо',
     'Иркутская обл.': 'сфо',
     'Владимирская обл.': 'цфо',
     'Респ. Татарстан': 'пфо',
     'Воронежская обл.': 'цфо',
     'Респ. Мордовия': 'пфо',
     'г. Санкт-Петербург': 'сзфо',
     'Смоленская обл.': 'цфо',
     'Тверская обл.': 'цфо',
     'Оренбургская обл.': 'пфо',
     'Курская обл.': 'цфо',
     'Самарская обл.': 'пфо',
     'Челябинская обл.': 'уфо',
     'Тульская обл.': 'цфо',
     'Краснодарский край': 'юфо',
     'Томская обл.': 'сфо',
     'Карагандинская обл.': 'снг',
     'Ставропольский край': 'скфо',
     'Кемеровская обл.': 'сфо',
     'г. Москва': 'цфо',
     'Омская обл.': 'сфо',
     'Ярославская обл.': 'цфо',
     'Ленинградская обл.': 'сзфо',
     'Гомельская обл.': 'снг',
     'Калининградская обл.': 'сзфо',
     'Брянская обл.': 'цфо',
     'Респ. Удмуртия': 'пфо',
     'Новосибирская обл.': 'сфо',
     'Пензенская обл.': 'пфо',
     'Хабаровский край': 'дфо',
     'Саратовская обл.': 'пфо',
     'Орловская обл.': 'цфо',
     'Ханты-Мансийский а. о.': 'уфо',
     'Ульяновская обл.': 'пфо',
     'Красноярский край': 'сфо',
     'Кировская обл.': 'пфо',
     'г. Алма-Ата': 'снг',
     'Гродненская обл.': 'снг',
     'Могилевская обл.': 'снг',
     'Приморский край': 'дфо',
     'Псковская обл.': 'сзфо',
     'Калужская обл.': 'цфо',
     'Витебская обл.': 'снг',
     'Тюменская обл.': 'уфо',
     'Павлодарская обл.': 'снг',
     'Западно-Казахстанская обл.': 'снг',
     'Липецкая обл.': 'цфо',
     'Ивановская обл.': 'цфо',
     'Еврейская АО': 'дфо',
     'Вологодская обл.': 'сзфо',
     'Мангистауская обл.': 'снг',
     'Респ. Саха (Якутия)': 'дфо',
     'г. Минск': 'снг',
     'г. Нур-Султан': 'снг',
     'Белгородская обл.': 'цфо',
     'Чувашская респ.': 'пфо',
     'Респ. Дагестан': 'скфо',
     'Респ. Коми': 'сзфо',
     'Астраханская обл.': 'юфо',
     'Восточно-Казахстанская обл.': 'снг',
     'Респ. Хакасия': 'сфо',
     'Респ. Марий Эл': 'пфо'}
    
    df['region_big'] = df['country'].map(reg_dict)

    dataloader = get_loader(
        df,
        encoder_path=encoder_path,
        shuffle=False,
        period=None,
        num_workers=num_workers,
        task='inference',
        batch_size=8
        )
    preds = MODEL.predict(dataloader)

    agg_cols = ["material_code", "company_code", "country", "region",
                "manager_code", "material_lvl1_name", "material_lvl2_name",
                "material_lvl3_name", "contract_type", 'region_big']
    test = df.groupby(agg_cols + ["month"])["volume"].sum().unstack(fill_value=0)
    test['prediction'] = preds

    preds_df = test['prediction'] \
        .reset_index() \
        .pivot_table(
            index=['material_code', 'company_code', 'country', 'region', 'manager_code'],
            aggfunc='sum'
            ) \
        .reset_index()
    return preds_df


weights_path = ABS_PATH.joinpath('experiment')
weights = [
    weights_path.joinpath('last.pth')
    ]
MODEL = load_model(weights)


# torch.backends.quantized.engine = 'qnnpack'
# MODEL = torch.quantization.quantize_dynamic(
#     MODEL, {torch.nn.LSTM, torch.nn.Linear}, dtype=torch.qint8
# )